See the Assessment Guide for information on how to interpret this report.

Want to receive personalized feedback on this submission? You can pay to have a teaching assistant read and provide personalized feedback on your submission at https://mooc.codepost.io.


ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

SpotBugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 17 warnings)

Correctness:  20/38 tests passed
Memory:       8/8 tests passed
Timing:       4/20 tests passed

Aggregate score: 50.58%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 60%, Timing: 10%, Memory: 20% ]


ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.7K Oct 13 16:42 Percolation.java
2.6K Oct 13 16:42 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------
PercolationStats.java:24: warning: [deprecation] uniform(int) in StdRandom has been deprecated
                int row = StdRandom.uniform(n) + 1;
                                   ^
PercolationStats.java:25: warning: [deprecation] uniform(int) in StdRandom has been deprecated
                int col = StdRandom.uniform(n) + 1;
                                   ^
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Percolation.java:1:8: Unused import statement for 'edu.princeton.cs.algs4.StdRandom'. [UnusedImports]
[WARN] Percolation.java:2:8: Unused import statement for 'edu.princeton.cs.algs4.StdStats'. [UnusedImports]
[WARN] Percolation.java:6:17: The instance variable 'Top' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:7:17: The instance variable 'Bottom' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:8:17: The instance variable 'Range' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:9:19: The instance variable 'OpenState' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:10:34: The instance variable 'UF' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:43:15: The local variable 'ChangeRow' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Percolation.java:44:15: The local variable 'ChangeCol' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Percolation.java:47:17: The local variable 'NeighborRow' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Percolation.java:48:17: The local variable 'NeighborCol' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] PercolationStats.java:7:17: The instance variable 'TotalSites' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] PercolationStats.java:8:19: The instance variable 'OpenSites' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] PercolationStats.java:19:25: The local variable 'Sites' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] PercolationStats.java:20:17: The local variable 'Times' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 15 warnings.

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------
[INFO] Percolation.java:70: Using a loop in this method might be a performance bug. [Performance]
[WARN] Percolation.java:9:13: Can you use the type 'boolean[]' instead of 'int[]'? [Design]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------
[WARN] PercolationStats.java:1:1: The constant '1.96' appears more than once. Define a constant variable (such as 'CONFIDENCE_95') to hold the constant '1.96'. [NumericLiteralCount]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 21 total tests.

Tests 1 through 7 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Tests 12 through 15 create a Percolation object using your code, then repeatedly
call the methods open(), isOpen(), isFull(), percolates(), and, numberOfOpenSites()
in random order with probabilities p = (p1, p2, p3, p4, p5). The tests stop
immediately after the system percolates.

Tests 18 through 21 test backwash.

Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input8.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input8-no.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input10-no.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = greeting57.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = heart25.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 2: open random sites until the system percolates
  * n = 3
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 5
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
    - percolates() returns wrong value after 0 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = input1-no.txt
    - percolates() returns wrong value after 0 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = input2.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input2-no.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = snake101.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 5: open every site
  * filename = input5.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 6: open random sites until the system percolates,
        allowing open() to be called on a site more than once
  * n = 3
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 5
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 7: open random sites with large n
  * n = 250
    - isFull() returns wrong value after 4 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 20 of 1000

  * n = 500
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 5 of 1000

  * n = 1000
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 6 of 1000

  * n = 2000
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 1 of 1000

==> FAILED

Test 8: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
  * n = 10, (row, col) = (11, 5)
  * n = 10, (row, col) = (0, 5)
  * n = 10, (row, col) = (5, -1)
  * n = 10, (row, col) = (5, 11)
  * n = 10, (row, col) = (5, 0)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (2147483647, 2147483647)
==> passed

Test 9: call constructor with invalid argument
  * n = -10
    - the constructor fails to throw an exception
    - the constructor should throw a java.lang.IllegalArgumentException

  * n = -1
    - the constructor fails to throw an exception
    - the constructor should throw a java.lang.IllegalArgumentException

  * n = 0
    - the constructor fails to throw an exception
    - the constructor should throw a java.lang.IllegalArgumentException

==> FAILED

Test 10: create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 11: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

==> FAILED

Test 12: call open(), isOpen(), and numberOfOpenSites()
         in random order until just before system percolates
  * n = 3, trials = 40, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 5, trials = 20, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 7, trials = 10, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 10, trials = 5, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 20, trials = 2, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 50, trials = 1, p = (0.4, 0.4, 0.0, 0.0, 0.3)
==> passed

Test 13: call open() and percolates() in random order until just before system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 5, trials = 20, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 7, trials = 10, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 10, trials = 5, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 20, trials = 2, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 50, trials = 1, p = (0.5, 0.0, 0.0, 0.5, 0.0)
==> passed

Test 14: call open() and isFull() in random order until just before system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40
    - sequence of operations was:
         percolation.open(3, 2)
         percolation.isFull(row, col) for each row and col

  * n = 5, trials = 20, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20
    - sequence of operations was:
         percolation.isFull(row, col) for each row and col

  * n = 7, trials = 10, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10
    - sequence of operations was:
         percolation.open(1, 2)
         percolation.open(5, 7)
         percolation.isFull(row, col) for each row and col

  * n = 10, trials = 5, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5
    - sequence of operations was:
         percolation.isFull(row, col) for each row and col

  * n = 20, trials = 2, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2
    - sequence of operations was:
         percolation.isFull(row, col) for each row and col

  * n = 50, trials = 1, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1
    - sequence of operations was:
         percolation.open(33, 38)
         percolation.isFull(row, col) for each row and col

==> FAILED

Test 15: call all methods in random order until just before system percolates
  * n = 3, trials = 40, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 2) = true
    - reference isFull(1, 2) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 2) = true
    - reference isFull(1, 2) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 5, trials = 20, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 8 sites opened
    - student   isFull(1, 2) = true
    - reference isFull(1, 2) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 2) = true
    - reference isFull(1, 2) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 5 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 7, trials = 10, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 10, trials = 5, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 20, trials = 2, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 50, trials = 1, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

==> passed

Test 16: call all methods in random order until almost all sites are open
         (with inputs not prone to backwash)
  * n = 3
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED

Test 17: substitute the WeightedQuickUnionUF implementation with one that
         picks the leader nondeterministically after each call to union();
         call all methods in random order until almost all sites are open
         (with inputs not prone to backwash)
  * n = 3
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED

Test 18: check for backwash with predetermined sites
  * filename = input20.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input10.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input50.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = jerry47.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = sedgewick60.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = wayne98.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 19: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input4.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input7.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 20: call all methods in random order until all sites are open
         (these inputs are prone to backwash)
  * n = 3
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED

Test 21: substitute WeightedQuickUnionUF data type that picks leader nondeterministically;
         call all methods in random order until all sites are open
         (these inputs are prone to backwash)
  * n = 3
    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED


Total: 4/21 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 17 total tests.

Test 1: check formatting of output of main()
  % java-algs4 PercolationStats 20 10
  mean                    = 0.54725
  stddev                  = 0.040559455672437766
  95% confidence interval = [0.5221109889260183, 0.5723890110739818]

  % java-algs4 PercolationStats 200 100
  mean                    = 0.5929215
  stddev                  = 0.009545514984176147
  95% confidence interval = [0.5910505790631014, 0.5947924209368985]

==> passed

Test 2: check that methods in PercolationStats do not print to standard output
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 3: check that mean() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
  * n =  10, trials = 10000
  * n =  25, trials = 10000
==> passed

Test 4: check that stddev() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
  * n =  10, trials = 10000
  * n =  25, trials = 10000
==> passed

Test 5: check that PercolationStats constructor creates
        trials Percolation objects, each of size n-by-n
  * n =  15, trials =  15
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: check that PercolationStats.main() creates
        trials Percolation objects, each of size n-by-n
  * n =  15, trials =  15
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 8: check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 9: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: check that stddev() is consistent with the number of intercepted calls to open()
         on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 11: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 12: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n = -42, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n =  42, trials =  -1
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

  * n = -2147483648, trials = -2147483648
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 13: create two PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 14: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 15: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 16: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed

Test 17: check that each site is opened the expected number of times
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 16/17 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Analyzing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
=> passed       16          152         
=> passed       32          216         
=> passed       64          344         
=> passed      128          600         
==> 4/4 tests passed


Estimated student memory = 4.00 T + 88.00   (R^2 = 1.000)

Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: Call PercolationStats constructor and instance methods and
        count calls to StdStats.mean() and StdStats.stddev().
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: Call PercolationStats constructor and instance methods and
        count calls to methods in StdRandom.
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: Call PercolationStats constructor and instance methods and
        count calls to methods in Percolation.
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Call PercolationStats constructor and instance methods with trials = 3
        and values of n that go up by a multiplicative factor of sqrt(2).
        The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       724     0.19       2.9
      1024     0.57       3.1
      1448     1.44       2.7
      2048     3.21       2.3
      2896     7.69       2.5
==> passed


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        49344         
=> passed      256       786624         
=> passed      512      3145920         
=> passed     1024     12583104         
==> 4/4 tests passed


Estimated student memory = 12.00 n^2 + 0.00 n + 192.00   (R^2 = 1.000)


Test 2 (bonus): check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
   -  failed memory test for n = 192
==> FAILED


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=> passed       16          197                   306                   1         
=> passed       32          792                  1248                   1         
=> passed       64         3090                  4996                   1         
=> passed      128        11830                 19468                   1         
=> passed      256        47260                 78318                   1         
=> passed      512       180087                306718                   1         
=> passed     1024       751078               1254126                   1         
==> 7/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union() and find() calls made
             during a single call to open(), isOpen(), isFull(), and percolates().
             One call to connected() counts as two calls to find().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.
         This usually indicates a performance bug or an infinite loop.




Total: 0/16 tests passed:<font color = #990000><b> Could not complete tests, which results in a reported score of 0.</b></font>
================================================================




